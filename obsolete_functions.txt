        //public static LinearCalibration LoadFromFile(string fileName)
        //{
        //    NumberFormatInfo nfi = new NumberFormatInfo();
        //    nfi.NumberDecimalSeparator = ",";
            
        //    XDocument doc = null;
        //    try { doc = XDocument.Load(fileName); }
        //    catch (Exception ex)
        //    {
        //        throw new Exception ("Incorrect XML file format", ex);
        //    }
        //    var root = doc.Root;
        //    int ErrCounter = 0;
        //    int ElementNumber = 1;
        //    string ErrorMesssage = "";
        //    ChemicalElemetCalibration chemEl;
        //    Guid calGUID;
        //    List<DataPoint>[] lst = new List<DataPoint>[2];
        //    string desc;
        //    DateTime calDate;
        //    try
        //    {
        //        chemEl = (ChemicalElemetCalibration)
        //            Enum.Parse(typeof(ChemicalElemetCalibration),
        //            root.Element("ChemicalElement").Value.ToString(), true);
        //    }
        //    catch (Exception ex) { throw new Exception("Некорректное значение либо отсутствует химический элемент!", ex); }
        //    try
        //    {
        //        calGUID = new Guid(root.Element("GUID").Value.ToString());
        //    }
        //    catch (Exception ex) { throw new Exception("Некорректный GUID", ex); }
        //    desc = root.Element("Description")?.Value.ToString();
        //    try { calDate = DateTime.Parse(root.Element("CalibrationDate").Value.ToString()); }
        //    catch (Exception ex) { throw new Exception("Указана неверная дата", ex); }
        //    int i = 0;
        //    foreach (XElement xEl in root.Elements("DataPointsSet"))
        //    {
        //        lst[i] = new List<DataPoint>();
        //        foreach (XElement xDp in xEl.Elements("DataPoint"))
        //        {
        //            try
        //            {
        //                lst[i].Add(new DataPoint(
        //                    decimal.Parse(xDp.Element("Concentration").Value.ToString()),
        //                    decimal.Parse(xDp.Element("Value").Value.ToString())));
        //            }
        //            catch
        //            {
        //                ErrCounter++;
        //                ErrorMesssage += ", " + ElementNumber;
        //            }
        //            finally { ElementNumber++; }
        //        }
        //        if (++i > 2) { throw new Exception("калибровка содержит более двух диапазонов!"); }
        //    }
        //    return new LinearCalibration(chemEl, lst[0], lst[1], calGUID.ToString(), calDate, desc);
        //}

        //public void SaveToFile(string fileName, bool rewrite = true)
        //{
        //    NumberFormatInfo nfi = new NumberFormatInfo();
        //    nfi.NumberDecimalSeparator = ",";
        //    XDocument doc = new XDocument();
        //    XElement root = new XElement("LinearCalibration");
        //    root.Add(new XElement("ChemicalElement", CalibrationType.ToString()));
        //    if (CalibrationGUID == Guid.Parse("00000000-0000-0000-0000-000000000000")) CalibrationGUID = Guid.NewGuid();
        //    root.Add(new XElement("GUID", CalibrationGUID.ToString()));
        //    root.Add(new XElement("Description", Description));
        //    root.Add(new XElement("CalibrationDate", CalibrationDate.ToShortDateString().ToString()));
        //    for (int i = 0; i <= 1; i++)
        //    {
        //        XElement dataSet = new XElement("DataPointsSet");
        //        foreach (DataPoint tpl in LinearCalibrationData[i])
        //        {
        //            dataSet.Add(new XElement("DataPoint", new XElement("Concentration", tpl.Concentration.ToString(nfi)),
        //                new XElement("Value", tpl.Value.ToString(nfi))));
        //        }
        //        root.Add(dataSet);
        //    }
        //    doc.Add(root);
        //    if(!File.Exists(fileName) || (File.Exists(fileName) && rewrite)) doc.Save(fileName);
        //}

        //public bool GetNewGUID()
        //{
        //    if (LinearCalibrationData?[0].Count < 2 || LinearCalibrationData?[1].Count < 2) return false;
        //    else {CalibrationGUID = Guid.NewGuid(); return true; }
        //} 
		
		
		
		

        public Guid CalibrationGUID { get; set; }
        
		
 /// <summary>
        /// Contructs new linear calibration fit from lists of tuples (decimal,decimal)
        /// </summary>
        /// <param name="cType"> Type of chemical element the calibration is aimed at</param>
        /// <param name="dataList1">The list of points (DataPoint(decimal,decimal)) where first item in tuplet represent concentration and the second — the value</param>
        /// <param name="dataList2">The same as dataList1 but holding other diapason with different coefficients </param>
        public LinearCalibration(ChemicalElemetCalibration cType,
            List<DataPoint> dataList1, List<DataPoint> dataList2, string szGuid, DateTime date, string desc="") : this()
        {
            if (dataList1.Count < 2 || dataList2.Count < 2)
                throw new ArgumentOutOfRangeException("dataList",
               "To calculate linear approximation at least two points are necessary");
            dataList1.Sort((p1, p2) => p1.Value.CompareTo(p2.Value));
            dataList1.ForEach(p => LinearCalibrationData[0].Add(p));
            dataList2.Sort((p1, p2) => p1.Value.CompareTo(p2.Value));
            dataList2.ForEach(p => LinearCalibrationData[1].Add(p));
          
            CalibrationType = cType;
            GetLinearCoefficients();
            try { CalibrationGUID = new Guid(szGuid); }
            catch { CalibrationGUID = Guid.NewGuid(); }
            CalibrationDate = date;
            Description = desc;
        }

		
        /// <summary>
        /// Memberwise copy
        /// </summary>
        /// <param name="_lc"></param>
        public LinearCalibration (LinearCalibration _lc) : this()
        {
            this.CalibrationDate = _lc.CalibrationDate;
            this.CalibrationGUID = _lc.CalibrationGUID;
            this.CalibrationType = _lc.CalibrationType;
            this.Description = _lc.Description;
            _lc.LinearCalibrationData[0].ToList<DataPoint>().ForEach(p => this.LinearCalibrationData[0].Add(p));
            _lc.LinearCalibrationData[1].ToList<DataPoint>().ForEach(p => this.LinearCalibrationData[1].Add(p));
            if (this.LinearCalibrationData[0]?.Count>=2 && this.LinearCalibrationData[1]?.Count >= 2)
                this.GetLinearCoefficients();
        }      

//private void SaveCommand_Executed(object sender, ExecutedRoutedEventArgs e)
        //{
        //    SaveFileDialog saveFileDialog = new SaveFileDialog();
        //    saveFileDialog.Filter = "XML file|*.xml";
        //    NumberFormatInfo nfi = new NumberFormatInfo();
        //    nfi.NumberDecimalSeparator = ",";
        //    if (saveFileDialog.ShowDialog() == true)
        //    {
        //        string pth = Path.Combine(Directory.GetCurrentDirectory(), "Calibration");
                
        //        try
        //        {
        //            if (Path.GetDirectoryName(saveFileDialog.FileName) == pth)
        //            {
        //                lcCalibration.SaveToFile(Path.GetFileName(saveFileDialog.FileName));
        //                LastSavedFilePath = Path.GetFileName(saveFileDialog.FileName);
        //            }
        //            else
        //            {
        //                lcCalibration.SaveToFile(saveFileDialog.FileName);
        //                LastSavedFilePath = saveFileDialog.FileName;
        //            }
        //            HasSaved = true;
        //        }
        //        catch { }
        //    }

        //}

        //private void OpenCommand_Executed(object sender, ExecutedRoutedEventArgs e)
        //{

        //}

        //private void SaveCommand_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        //{
        //    e.CanExecute = (lcCalibration != null);
        //}

        //private void OpenCommand_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        //{
        //    e.CanExecute = (lcCalibration != null) && HasSaved;
        //}

        //private void NewCommand_Executed(object sender, ExecutedRoutedEventArgs e)
        //{
        //    LinearCalibration calibration = new LinearCalibration();
        //    CalibrationDataDialog cDialog = new CalibrationDataDialog(ref calibration);
        //    cDialog.Title = "Ввести данные о новой калибровке";
        //    if (cDialog.ShowDialog() == true)
        //    {
        //        lcCalibration = new LinearCalibration(cDialog.lc);
        //    }
        //}

        //private void NewCommand_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        //{
        //    e.CanExecute = HasSaved;
        //}

        //private void EditCommand_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        //{
        //    e.CanExecute = (lcCalibration != null);
        //}

        //private void EditCommand_Executed(object sender, ExecutedRoutedEventArgs e)
        //{
        //    HasSaved = false;
        //    LinearCalibration calibration = lcCalibration;
        //    CalibrationDataDialog cDialog = new CalibrationDataDialog(ref calibration);
        //    cDialog.Title = "Ввести данные о новой калибровке";
        //    if (cDialog.ShowDialog() == true)
        //    {
        //        lcCalibration = new LinearCalibration(cDialog.lc);
        //    }
        //}

        //private void CloseCommand_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        //{
        //    e.CanExecute = (lcCalibration == null) || (lcCalibration != null && HasSaved);
        //}

        //private void CloseCommand_Executed(object sender, ExecutedRoutedEventArgs e)
        //{
        //    switch (((MenuItem)e.Source).Header)
        //    {
        //        case "Закрыть":
        //            Close();
        //            break;
        //        default:
        //            if (lcCalibration.CalibrationType == ChemicalElemetCalibration.Natrium)
        //                Properties.Settings.Default.NatirumCalibrationFile = LastSavedFilePath;
        //            else Properties.Settings.Default.KaliumCalibrationFile = LastSavedFilePath;
        //            Properties.Settings.Default.Save();
        //            Close();
        //            break;
        //    }
            
        //}


        private void OpenCommand_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "XML file|*.xml";
            NumberFormatInfo nfi = new NumberFormatInfo();
            nfi.NumberDecimalSeparator = ",";
            if (openFileDialog.ShowDialog() == true)
            {
                //dummy
                XDocument doc = null;
                try
                { doc = XDocument.Load(openFileDialog.FileName); }
                catch (Exception ex)
                {
                    MessageBox.Show("Incorrect XML file format\n" + ex.Message, "Error!",
                        MessageBoxButton.OK, MessageBoxImage.Stop);
                    return;
                }
            }
        }
		
		
		<!--<TextBlock.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="Clear filter" Click="ClearFilterMenuItem_Click" 
                              IsEnabled="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu, Mode=FindAncestor},
                        Path=PlacementTarget.Text, Converter={StaticResource str2bool}, NotifyOnSourceUpdated=True}"/>
                </ContextMenu>
            </TextBlock.ContextMenu>-->
			
			
			
        #region FilterText Property
        public string FilterText
        {
            get { return (string)GetValue(FilterTextProperty); }
            set { SetValue(FilterTextProperty, value); }
        }

        public static readonly DependencyProperty FilterTextProperty =
            DependencyProperty.Register(nameof(FilterText), typeof(string), typeof(MainWindow),
                new PropertyMetadata(null));
        #endregion FilterText Property

CREATE PROCEDURE GetSamplesByMultipleIDs
	@tmp ByIDSelectiontype READONLY
AS
	SELECT * FROM SaltAnalysis
	INNER JOIN [@tmp] ON [SaltAnalysis].IDSaltAnalysis = [@tmp].ID

//let tooltips be shown on disabled controls as well
            //ToolTipService.ShowOnDisabledProperty.OverrideMetadata(
            //    typeof(Control),
            //    new FrameworkPropertyMetadata(true));

<!--<ObjectDataProvider x:Key="dataFromEnum" MethodName="GetValues"
                            ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="SA_EF:SaltCalculationSchemes"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>-->

xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"

                          <!--<ComboBox SelectedItem="{Binding Path=DefaultCalculationScheme, 
                                    ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged,
                                    NotifyOnValidationError=True, Mode=TwoWay, NotifyOnTargetUpdated=True}"
                                         ItemsSource="{Binding Source={StaticResource dataFromEnum}}" 
                                         ToolTip="Выберите требуемую схему расчета, принимая во внимание предполагаемую.&#x0a;Данные буду обсчитаны с использованием выбранной вами схемы!"/>-->